/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.apache.spark.streaming.flume.sink;

@SuppressWarnings("all")
/** * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License. */
@org.apache.avro.specific.AvroGenerated
public interface SparkFlumeProtocol {
  public static final org.apache.avro.Protocol PROTOCOL = org.apache.avro.Protocol.parse("{\"protocol\":\"SparkFlumeProtocol\",\"namespace\":\"org.apache.spark.streaming.flume.sink\",\"doc\":\"* Licensed to the Apache Software Foundation (ASF) under one\\n * or more contributor license agreements.  See the NOTICE file\\n * distributed with this work for additional information\\n * regarding copyright ownership.  The ASF licenses this file\\n * to you under the Apache License, Version 2.0 (the\\n * \\\"License\\\"); you may not use this file except in compliance\\n * with the License.  You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing,\\n * software distributed under the License is distributed on an\\n * \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n * KIND, either express or implied.  See the License for the\\n * specific language governing permissions and limitations\\n * under the License.\",\"types\":[{\"type\":\"record\",\"name\":\"SparkSinkEvent\",\"fields\":[{\"name\":\"headers\",\"type\":{\"type\":\"map\",\"values\":\"string\"}},{\"name\":\"body\",\"type\":\"bytes\"}]},{\"type\":\"record\",\"name\":\"EventBatch\",\"fields\":[{\"name\":\"errorMsg\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"sequenceNumber\",\"type\":\"string\"},{\"name\":\"events\",\"type\":{\"type\":\"array\",\"items\":\"SparkSinkEvent\"}}]}],\"messages\":{\"getEventBatch\":{\"request\":[{\"name\":\"n\",\"type\":\"int\"}],\"response\":\"EventBatch\"},\"ack\":{\"request\":[{\"name\":\"sequenceNumber\",\"type\":\"string\"}],\"response\":\"null\"},\"nack\":{\"request\":[{\"name\":\"sequenceNumber\",\"type\":\"string\"}],\"response\":\"null\"}}}");
  org.apache.spark.streaming.flume.sink.EventBatch getEventBatch(int n) throws org.apache.avro.AvroRemoteException;
  java.lang.Void ack(java.lang.CharSequence sequenceNumber) throws org.apache.avro.AvroRemoteException;
  java.lang.Void nack(java.lang.CharSequence sequenceNumber) throws org.apache.avro.AvroRemoteException;

  @SuppressWarnings("all")
  /** * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License. */
  public interface Callback extends SparkFlumeProtocol {
    public static final org.apache.avro.Protocol PROTOCOL = org.apache.spark.streaming.flume.sink.SparkFlumeProtocol.PROTOCOL;
    void getEventBatch(int n, org.apache.avro.ipc.Callback<org.apache.spark.streaming.flume.sink.EventBatch> callback) throws java.io.IOException;
    void ack(java.lang.CharSequence sequenceNumber, org.apache.avro.ipc.Callback<java.lang.Void> callback) throws java.io.IOException;
    void nack(java.lang.CharSequence sequenceNumber, org.apache.avro.ipc.Callback<java.lang.Void> callback) throws java.io.IOException;
  }
}